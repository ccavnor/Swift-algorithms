{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinarySearchTree"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Comparable","preciseIdentifier":"s:SL"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/binarysearchtree\/binarysearchtree"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/BinarySearchTree\/s23CustomStringConvertibleP","doc:\/\/BinarySearchTree\/12TreeProtocolAAP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A binary search tree. Each node stores a value and up to two children. This tree ignores any inserted duplicate elements."},{"type":"text","text":" "},{"type":"text","text":"This tree does not automatically balance itself. To make sure it is balanced, you should insert new values in"},{"type":"text","text":" "},{"type":"text","text":"randomized order, not in sorted order."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinarySearchTree"}],"title":"BinarySearchTree","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:16BinarySearchTreeAAC","modules":[{"name":"BinarySearchTree"}],"navigatorTitle":[{"kind":"identifier","text":"BinarySearchTree"}]},"hierarchy":{"paths":[["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(array:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(value:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/nodeCount","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/root","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/size"]},{"title":"Instance Methods","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/contains(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/draw()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inLeftTree(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inRightTree(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/insert(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/map(_:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/predecessor(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/remove(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/search(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/successor(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traverseInOrder(completion:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePostOrder(completion:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePreOrder(completion:)"]},{"title":"Subscripts","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/subscript(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/CustomStringConvertible-Implementations","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/TreeProtocol-Implementations"],"generated":true}],"references":{"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/inRightTree(value:)":{"role":"symbol","title":"inRightTree(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"inRightTree"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns true iff node is in the right subtree of root"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inRightTree(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/inrighttree(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/height(node:)":{"role":"symbol","title":"height(node:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"height"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height(node:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/height(node:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree":{"role":"symbol","title":"BinarySearchTree","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinarySearchTree"}],"abstract":[{"type":"text","text":"A binary search tree. Each node stores a value and up to two children. This tree ignores any inserted duplicate elements."},{"type":"text","text":" "},{"type":"text","text":"This tree does not automatically balance itself. To make sure it is balanced, you should insert new values in"},{"type":"text","text":" "},{"type":"text","text":"randomized order, not in sorted order."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BinarySearchTree"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/minimum(node:)":{"role":"symbol","title":"minimum(node:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimum"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Returns the leftmost descendent of given node. O(h) time."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum(node:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/minimum(node:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/minimum()":{"role":"symbol","title":"minimum()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimum"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Returns the leftmost descendent of tree. O(h) time."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum()","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/minimum()"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/subscript(_:)":{"role":"symbol","title":"subscript(_:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Custom collection accessor for [] notation"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/subscript(_:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/subscript(_:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/contains(value:)":{"role":"symbol","title":"contains(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/contains(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/contains(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/maximum(node:)":{"role":"symbol","title":"maximum(node:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"maximum"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Returns the rightmost descendent of given node. O(h) time."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum(node:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/maximum(node:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traversePreOrder(completion:)":{"role":"symbol","title":"traversePreOrder(completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"traversePreOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Pre-order traversal using given function as accumulator for node values."},{"type":"text","text":" "},{"type":"text","text":"use like this:"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePreOrder(completion:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traversepreorder(completion:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/search(value:)":{"role":"symbol","title":"search(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"search"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Finds the “highest” (in tree) node with the specified value."},{"type":"text","text":" "},{"type":"text","text":"Performance: runs in O(h) time, where h is the height of the tree."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/search(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/search(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traversePostOrder(completion:)":{"role":"symbol","title":"traversePostOrder(completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"traversePostOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Post-order traversal using given function as accumulator for node values."},{"type":"text","text":" "},{"type":"text","text":"use like this:"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePostOrder(completion:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traversepostorder(completion:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/height()":{"role":"symbol","title":"height()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"height"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Calculates the height of the tree, i.e. the distance from root to the lowest leaf. A tree of one node has height == 1."},{"type":"text","text":" "},{"type":"text","text":"Since this looks at all children of tree, performance is O(n)."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height()","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/height()"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/draw()":{"role":"symbol","title":"draw()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"draw"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Draw the tree as a flattened structure. The implementation is in an extension so that derived classes can provide their own implementations."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/draw()","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/draw()"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(node:)":{"role":"symbol","title":"init(node:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(node:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(node:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/root":{"role":"symbol","title":"root","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"root"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/root","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/root"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/size":{"role":"symbol","title":"size","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"size"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"How many nodes are in this tree. Performance: O(n)."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/size","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/size"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traverseInOrder(completion:)":{"role":"symbol","title":"traverseInOrder(completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"traverseInOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"In-order traversal using given function as accumulator for node values."},{"type":"text","text":" "},{"type":"text","text":"use like this:"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traverseInOrder(completion:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traverseinorder(completion:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/remove(value:)":{"role":"symbol","title":"remove(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Deletes a node from the tree."},{"type":"text","text":" "},{"type":"text","text":"Performance: runs in O(h) time, where h is the height of the tree."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/remove(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/remove(value:)"},"doc://BinarySearchTree/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/BinarySearchTree\/s23CustomStringConvertibleP"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/successor(value:)":{"role":"symbol","title":"successor(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"successor"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Finds the node whose value succeeds our value in sorted order."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/successor(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/successor(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/maximum()":{"role":"symbol","title":"maximum()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"maximum"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Returns the rightmost descendent of tree. O(h) time."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum()","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/maximum()"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/inLeftTree(value:)":{"role":"symbol","title":"inLeftTree(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"inLeftTree"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns true iff node is in the left subtree of root"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inLeftTree(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/inlefttree(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/map(_:)":{"role":"symbol","title":"map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Performs an in-order traversal, applying the given map function, and collects the values in an array."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/map(_:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/map(_:)"},"doc://BinarySearchTree/documentation/BinarySearchTree":{"role":"collection","title":"BinarySearchTree","abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/CustomStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/customstringconvertible-implementations"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/nodeCount":{"role":"symbol","title":"nodeCount","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"nodeCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/nodeCount","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/nodecount"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(value:)":{"role":"symbol","title":"init(value:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/insert(value:)":{"role":"symbol","title":"insert(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Inserts a new element into the tree. You should randomly insert elements at the root, to make to sure this remains a valid"},{"type":"text","text":" "},{"type":"text","text":"binary tree! Duplicate values are ignored, but this incurs a lookup penalty."},{"type":"text","text":" "},{"type":"text","text":"Performance: runs in O(h) time, where h is the height of the tree."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/insert(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/insert(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/TreeProtocol-Implementations":{"role":"collectionGroup","title":"TreeProtocol Implementations","abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/TreeProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/treeprotocol-implementations"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(array:)":{"role":"symbol","title":"init(array:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"array"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"])"}],"abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(array:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(array:)"},"doc://BinarySearchTree/12TreeProtocolAAP":{"type":"unresolvable","title":"TreeProtocol.TreeProtocol","identifier":"doc:\/\/BinarySearchTree\/12TreeProtocolAAP"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/predecessor(value:)":{"role":"symbol","title":"predecessor(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"predecessor"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Finds the node whose value preceedes our value in sorted order."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/predecessor(value:)","kind":"symbol","type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/predecessor(value:)"}}}