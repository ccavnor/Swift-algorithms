{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(array:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(value:)"],"anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/nodeCount","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/root","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/size"],"anchor":"Instance-Properties","generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/contains(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/deleteNode(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/display(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/draw()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/drawParents()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inLeftTree(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inRightTree(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/insert(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/map(_:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum(node:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/predecessor(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/remove(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/search(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/successor(value:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/toArray()","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traverseInOrder(completion:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePostOrder(completion:)","doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePreOrder(completion:)"],"generated":true},{"title":"Subscripts","generated":true,"anchor":"Subscripts","identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/subscript(_:)"]},{"identifiers":["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/CustomStringConvertible-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/BinarySearchTree\/s8CopyableP","doc:\/\/BinarySearchTree\/s23CustomStringConvertibleP","doc:\/\/BinarySearchTree\/12TreeProtocol0A1PP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"abstract":[{"type":"text","text":"A binary search tree (BST). Each node stores a value and up to two children."},{"type":"text","text":" "},{"type":"text","text":"As BSTs are utilized as classifications (or keys in a dictionary), they are not Bag data structures - meanding"},{"type":"text","text":" "},{"type":"text","text":"that duplicate values are not allowed."},{"type":"text","text":" "},{"type":"text","text":"This tree does not automatically balance itself. To make sure it is balanced, you should insert new values in"},{"type":"text","text":" "},{"text":"randomized order, not in sorted order.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/binarysearchtree\/binarysearchtree"]}],"metadata":{"title":"BinarySearchTree","symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BinarySearchTree","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BinarySearchTree"}],"roleHeading":"Class","role":"symbol","modules":[{"name":"BinarySearchTree"}],"externalID":"s:16BinarySearchTreeAAC"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinarySearchTree"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:12TreeProtocol0A6ValuePP","text":"TreeValueP","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree"},"kind":"symbol","references":{"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/minimum()":{"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"minimum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?"}],"abstract":[{"text":"Returns the leftmost descendent of tree. O(h) time.","type":"text"}],"kind":"symbol","type":"topic","title":"minimum()","url":"\/documentation\/binarysearchtree\/binarysearchtree\/minimum()","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/successor(value:)":{"abstract":[{"type":"text","text":"Finds the node whose value succeeds our value in sorted order."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"successor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/successor(value:)","role":"symbol","title":"successor(value:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/successor(value:)","kind":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/predecessor(value:)":{"title":"predecessor(value:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"predecessor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"role":"symbol","type":"topic","abstract":[{"text":"Finds the node whose value preceedes our value in sorted order.","type":"text"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/predecessor(value:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/predecessor(value:)","kind":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/root":{"abstract":[],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"root"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","text":"BinarySearchTreeNode","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/root","role":"symbol","title":"root","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/root","kind":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/insert(node:)":{"title":"insert(node:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"insert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"node","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","text":"BinarySearchTreeNode","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","type":"topic","abstract":[{"text":"Inserts a new element into the tree. You should randomly insert elements at the root, to make to sure this remains a valid","type":"text"},{"type":"text","text":" "},{"type":"text","text":"binary tree! Duplicate values are ignored, but this incurs a lookup penalty."},{"type":"text","text":" "},{"text":"Performance: runs in O(h) time, where h is the height of the tree.","type":"text"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/insert(node:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/insert(node:)","kind":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/height()":{"url":"\/documentation\/binarysearchtree\/binarysearchtree\/height()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"height","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height()","title":"height()","type":"topic","abstract":[{"text":"Calculates the height of the tree, i.e. the distance from root to the lowest leaf. A tree of one node has height == 1.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Since this looks at all children of tree, performance is O(n)."}],"kind":"symbol","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traversePostOrder(completion:)":{"abstract":[{"type":"text","text":"Post-order traversal using given function as accumulator for node values."},{"type":"text","text":" "},{"type":"text","text":"use like this:"}],"kind":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traversepostorder(completion:)","title":"traversePostOrder(completion:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePostOrder(completion:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"traversePostOrder"},{"text":"(","kind":"text"},{"text":"completion","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"type":"topic"},"doc://BinarySearchTree/documentation/BinarySearchTree":{"kind":"symbol","title":"BinarySearchTree","url":"\/documentation\/binarysearchtree","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree","role":"collection","type":"topic","abstract":[]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/contains(value:)":{"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/contains(value:)","role":"symbol","kind":"symbol","title":"contains(value:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"contains","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","abstract":[{"type":"text","text":"Check if tree contains value. Runs in search time."}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/contains(value:)"},"doc://BinarySearchTree/s8CopyableP":{"title":"Swift.Copyable","type":"unresolvable","identifier":"doc:\/\/BinarySearchTree\/s8CopyableP"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/inLeftTree(value:)":{"url":"\/documentation\/binarysearchtree\/binarysearchtree\/inlefttree(value:)","title":"inLeftTree(value:)","abstract":[{"type":"text","text":"Returns true iff node is in the left subtree of root"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inLeftTree(value:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"inLeftTree","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/draw()":{"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/draw()","role":"symbol","kind":"symbol","title":"draw()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"draw","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"type":"text","text":"Draw the tree as a flattened structure of node children. The implementation is in an extension so that derived classes can provide their own implementations."}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/draw()"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(value:)":{"url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(value:)","title":"init(value:)","abstract":[],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(value:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"value","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/height(node:)":{"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/height(node:)","role":"symbol","kind":"symbol","title":"height(node:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"height"},{"text":"(","kind":"text"},{"text":"node","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","kind":"typeIdentifier","text":"BinarySearchTreeNode"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?) -> "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"type":"topic","abstract":[{"type":"text","text":"Calculates the height of a given node in tree. There is a dynamic cost to using this function"},{"text":" ","type":"text"},{"type":"text","text":"over the height property of nodes, but the latter are only guaranteed to be accurate after balancing in AVL trees."}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/height(node:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/maximum()":{"url":"\/documentation\/binarysearchtree\/binarysearchtree\/maximum()","title":"maximum()","abstract":[{"type":"text","text":"Returns the rightmost descendent of tree. O(h) time."}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"maximum","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/remove(value:)":{"type":"topic","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/remove(value:)","kind":"symbol","title":"remove(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"kind":"text","text":"("},{"text":"value","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","text":"BinarySearchTreeNode","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Deletes a node from the tree and returns its replacement, if any."},{"text":" ","type":"text"},{"type":"text","text":"Performance: runs in O(h) time, where h is the height of the tree."}],"role":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/remove(value:)"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/map(_:)":{"kind":"symbol","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/map(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"map"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> ["},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/map(_:)","title":"map(_:)","abstract":[{"type":"text","text":"Performs an in-order traversal, applying the given map function, and collects the values in an array:"},{"type":"text","text":" "},{"type":"text","text":"(BinarySearchTree) -> BinarySearchTree) and returns [BinarySearchTreeNode"},{"type":"text","text":"]"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/CustomStringConvertible-Implementations":{"type":"topic","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/CustomStringConvertible-Implementations","abstract":[],"title":"CustomStringConvertible Implementations","url":"\/documentation\/binarysearchtree\/binarysearchtree\/customstringconvertible-implementations","kind":"article","role":"collectionGroup"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/deleteNode(node:)":{"title":"deleteNode(node:)","role":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/deletenode(node:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"deleteNode"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","text":"BinarySearchTreeNode","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Deletes the given node and returns its replacement, if any"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/deleteNode(node:)","kind":"symbol","type":"topic"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/maximum(node:)":{"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/maximum(node:)","role":"symbol","title":"maximum(node:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/maximum(node:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"maximum","kind":"identifier"},{"kind":"text","text":"("},{"text":"node","kind":"externalParam"},{"kind":"text","text":": "},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?"}],"kind":"symbol","abstract":[{"type":"text","text":"Returns the rightmost descendent of given node. O(h) time."}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/toArray()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"toArray"},{"kind":"text","text":"() -> ["},{"text":"T","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/toArray()","abstract":[{"text":"return an array of node values from an in-order traversal","type":"text"}],"title":"toArray()","url":"\/documentation\/binarysearchtree\/binarysearchtree\/toarray()","kind":"symbol","role":"symbol"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/inRightTree(value:)":{"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/inrighttree(value:)","role":"symbol","title":"inRightTree(value:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/inRightTree(value:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"inRightTree"},{"kind":"text","text":"("},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Returns true iff node is in the right subtree of root","type":"text"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traversePreOrder(completion:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"traversePreOrder","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"completion"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")","kind":"text"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traversePreOrder(completion:)","role":"symbol","title":"traversePreOrder(completion:)","kind":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traversepreorder(completion:)","abstract":[{"text":"Pre-order traversal using given function as accumulator for node values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use like this:"}],"type":"topic"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/minimum(node:)":{"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/minimum(node:)","role":"symbol","title":"minimum(node:)","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/minimum(node:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"minimum","kind":"identifier"},{"kind":"text","text":"("},{"text":"node","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"text":"BinarySearchTreeNode","kind":"typeIdentifier","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">?","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Returns the leftmost descendent of given node. O(h) time."}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/display(node:)":{"role":"symbol","kind":"symbol","abstract":[{"text":"Display the tree in graphical fashion","type":"text"}],"title":"display(node:)","url":"\/documentation\/binarysearchtree\/binarysearchtree\/display(node:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"display"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"TreeValueP","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/display(node:)","type":"topic"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/traverseInOrder(completion:)":{"kind":"symbol","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/traverseInOrder(completion:)","role":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/traverseinorder(completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"traverseInOrder","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"title":"traverseInOrder(completion:)","type":"topic","abstract":[{"type":"text","text":"In-order traversal using given function as accumulator for node values."},{"type":"text","text":" "},{"type":"text","text":"use like this:"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/drawParents()":{"role":"symbol","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/drawParents()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"drawParents","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/drawparents()","title":"drawParents()","abstract":[{"text":"Draw the tree as a flattened structure of node parents. The implementation is in an extension so that derived classes can provide their own implementations.","type":"text"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/nodeCount":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"nodeCount","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/nodeCount","title":"nodeCount","abstract":[],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/nodecount","role":"symbol","kind":"symbol"},"doc://BinarySearchTree/12TreeProtocol0A1PP":{"identifier":"doc:\/\/BinarySearchTree\/12TreeProtocol0A1PP","title":"TreeProtocol.TreeP","type":"unresolvable"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(array:)":{"role":"symbol","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(array:)","kind":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"array"},{"text":": [","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"])","kind":"text"}],"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(array:)","title":"init(array:)","abstract":[]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/init(node:)":{"type":"topic","url":"\/documentation\/binarysearchtree\/binarysearchtree\/init(node:)","kind":"symbol","identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/init(node:)","title":"init(node:)","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"node"},{"text":": some ","kind":"text"},{"text":"BinarySearchTreeNode","preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">)","kind":"text"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/search(value:)":{"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/search(value:)","type":"topic","abstract":[{"type":"text","text":"Finds the “highest” (in tree) node with the specified value."},{"text":" ","type":"text"},{"type":"text","text":"Performance: runs in O(h) time, where h is the height of the tree."}],"title":"search(value:)","kind":"symbol","url":"\/documentation\/binarysearchtree\/binarysearchtree\/search(value:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"search"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:16BinarySearchTree0abC4NodeC","text":"BinarySearchTreeNode","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?"}]},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree":{"title":"BinarySearchTree","navigatorTitle":[{"text":"BinarySearchTree","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A binary search tree (BST). Each node stores a value and up to two children."},{"type":"text","text":" "},{"type":"text","text":"As BSTs are utilized as classifications (or keys in a dictionary), they are not Bag data structures - meanding"},{"text":" ","type":"text"},{"text":"that duplicate values are not allowed.","type":"text"},{"text":" ","type":"text"},{"text":"This tree does not automatically balance itself. To make sure it is balanced, you should insert new values in","type":"text"},{"type":"text","text":" "},{"text":"randomized order, not in sorted order.","type":"text"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BinarySearchTree"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/subscript(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Custom collection accessor for [] notation."},{"type":"text","text":" "},{"text":"To find out if a value is present in tree, use tree[value] - value will be returned if it exists.","type":"text"},{"text":" ","type":"text"},{"text":"To replace an existing value, use tree[existing_value] = new_value.","type":"text"},{"type":"text","text":" "},{"text":"To remove a key from the tree, use tree[value] = nil.","type":"text"},{"type":"text","text":" "},{"text":"To add a new value to the tree, assign the value to itself: tree[value] = value.","type":"text"}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/subscript(_:)","title":"subscript(_:)","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"("},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/subscript(_:)","type":"topic"},"doc://BinarySearchTree/documentation/BinarySearchTree/BinarySearchTree/size":{"role":"symbol","title":"size","type":"topic","abstract":[{"type":"text","text":"How many nodes are in this tree. Performance: O(n)."}],"url":"\/documentation\/binarysearchtree\/binarysearchtree\/size","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"size","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"identifier":"doc:\/\/BinarySearchTree\/documentation\/BinarySearchTree\/BinarySearchTree\/size"},"doc://BinarySearchTree/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","type":"unresolvable","identifier":"doc:\/\/BinarySearchTree\/s23CustomStringConvertibleP"}}}