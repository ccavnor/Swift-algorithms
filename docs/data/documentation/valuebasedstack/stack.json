{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stack"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Comparable","preciseIdentifier":"s:SL"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/valuebasedstack\/stack"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/ValueBasedStack\/s28CustomDebugStringConvertibleP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A Stack is a last-in-first-out (LIFO) data structure. This is a value-based implementation using an Enum as a container."},{"type":"text","text":" "},{"type":"text","text":"This implementation is purely functional. All of its operations involve traversals over a list of nodes and run in O(n) time."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stack"}],"title":"Stack","roleHeading":"Enumeration","role":"symbol","symbolKind":"enum","externalID":"s:15ValueBasedStack0C0O","modules":[{"name":"ValueBasedStack"}],"navigatorTitle":[{"kind":"identifier","text":"Stack"}]},"hierarchy":{"paths":[["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/empty","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/list(_:_:)","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/node(_:)"]},{"title":"Initializers","identifiers":["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/init()"]},{"title":"Instance Properties","identifiers":["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/isEmpty","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/size","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/toArray"]},{"title":"Instance Methods","identifiers":["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/contains(_:)","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/peek()","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/pop()","doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/push(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/CustomDebugStringConvertible-Implementations"],"generated":true}],"references":{"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/empty":{"role":"symbol","title":"Stack.empty","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"empty"}],"abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/empty","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/empty"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/peek()":{"role":"symbol","title":"peek()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"peek"},{"kind":"text","text":"() -> ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Get the value of the next element to be popped."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/peek()","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/peek()"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack":{"role":"symbol","title":"Stack","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stack"}],"abstract":[{"type":"text","text":"A Stack is a last-in-first-out (LIFO) data structure. This is a value-based implementation using an Enum as a container."},{"type":"text","text":" "},{"type":"text","text":"This implementation is purely functional. All of its operations involve traversals over a list of nodes and run in O(n) time."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Stack"}],"url":"\/documentation\/valuebasedstack\/stack"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/size":{"role":"symbol","title":"size","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"size"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"How many nodes are in this stack."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/size","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/size"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/contains(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"contains(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Check if an element exists in the Queue. This will take O(n) time."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/contains(_:)","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/contains(_:)"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/node(_:)":{"role":"symbol","title":"Stack.node(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"node"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/node(_:)","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/node(_:)"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/CustomDebugStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/customdebugstringconvertible-implementations"},"doc://ValueBasedStack/documentation/ValueBasedStack":{"role":"collection","title":"ValueBasedStack","abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/isEmpty":{"role":"symbol","title":"isEmpty","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEmpty"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Check if stack has any elements."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/isEmpty","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/isempty"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/pop()":{"role":"symbol","title":"pop()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pop"},{"kind":"text","text":"() -> ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Stack","preciseIdentifier":"s:15ValueBasedStack0C0O"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)?"}],"abstract":[{"type":"text","text":"Retrieve the last added element."},{"type":"text","text":" "},{"type":"text","text":"Returns an optional tuple of two elements:"}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/pop()","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/pop()"},"doc://ValueBasedStack/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/ValueBasedStack\/s28CustomDebugStringConvertibleP"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/list(_:_:)":{"role":"symbol","title":"Stack.list(_:_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"list"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Stack","preciseIdentifier":"s:15ValueBasedStack0C0O"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/list(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/list(_:_:)"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/push(_:)":{"role":"symbol","title":"push(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Stack","preciseIdentifier":"s:15ValueBasedStack0C0O"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Add a new element on the stack."},{"type":"text","text":" "},{"type":"text","text":"Recursively calls itself to effectively reverse order of addition."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/push(_:)","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/push(_:)"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/toArray":{"role":"symbol","title":"toArray","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"toArray"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"get an array of the stack elements, in their popped order."}],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/toArray","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/toarray"},"doc://ValueBasedStack/documentation/ValueBasedStack/Stack/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[],"identifier":"doc:\/\/ValueBasedStack\/documentation\/ValueBasedStack\/Stack\/init()","kind":"symbol","type":"topic","url":"\/documentation\/valuebasedstack\/stack\/init()"}}}