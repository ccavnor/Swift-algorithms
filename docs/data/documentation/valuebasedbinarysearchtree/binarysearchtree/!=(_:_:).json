{"abstract":[{"type":"text","text":"Inherited from "},{"code":"Equatable.!=(_:_:)","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/!=(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}]}],"kind":"declarations"}],"kind":"symbol","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"!=(_:_:)","role":"symbol","roleHeading":"Operator","extendedModule":"Swift","externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:26ValueBasedBinarySearchTree0cdE0O","modules":[{"relatedModules":["Swift"],"name":"ValueBasedBinarySearchTree"}],"symbolKind":"op","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"hierarchy":{"paths":[["doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree","doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/Equatable-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/!=(_:_:)"},"references":{"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree/!=(_:_:)":{"abstract":[],"role":"symbol","kind":"symbol","title":"!=(_:_:)","url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/!=(_:_:)","type":"topic","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree/Equatable-Implementations":{"url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/equatable-implementations","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/Equatable-Implementations","type":"topic","title":"Equatable Implementations","role":"collectionGroup","kind":"article","abstract":[]},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree":{"type":"topic","abstract":[],"kind":"symbol","title":"ValueBasedBinarySearchTree","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","role":"collection","url":"\/documentation\/valuebasedbinarysearchtree"},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree":{"identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree","abstract":[{"text":"An immutable Binary Search Tree (BST) using Enum value type. Each insertion or deletion will create a new BST.","type":"text"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BinarySearchTree"}],"url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree","navigatorTitle":[{"text":"BinarySearchTree","kind":"identifier"}],"title":"BinarySearchTree","kind":"symbol","role":"symbol"}}}