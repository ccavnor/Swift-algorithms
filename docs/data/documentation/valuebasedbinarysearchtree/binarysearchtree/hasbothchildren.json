{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/hasBothChildren","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"metadata":{"roleHeading":"Instance Property","symbolKind":"property","title":"hasBothChildren","externalID":"s:26ValueBasedBinarySearchTree0cdE0O15hasBothChildrenSbvp","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"hasBothChildren","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","modules":[{"name":"ValueBasedBinarySearchTree"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/hasbothchildren"]}],"hierarchy":{"paths":[["doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"hasBothChildren","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}],"kind":"declarations"}],"references":{"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree":{"type":"topic","abstract":[],"kind":"symbol","title":"ValueBasedBinarySearchTree","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","role":"collection","url":"\/documentation\/valuebasedbinarysearchtree"},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree":{"identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree","abstract":[{"text":"An immutable Binary Search Tree (BST) using Enum value type. Each insertion or deletion will create a new BST.","type":"text"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BinarySearchTree"}],"url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree","navigatorTitle":[{"text":"BinarySearchTree","kind":"identifier"}],"title":"BinarySearchTree","kind":"symbol","role":"symbol"},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree/hasBothChildren":{"title":"hasBothChildren","kind":"symbol","url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/hasbothchildren","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hasBothChildren"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[],"role":"symbol","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/hasBothChildren"}}}