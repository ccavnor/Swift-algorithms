{"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"traversePreOrder","kind":"identifier"},{"kind":"text","text":"("},{"text":"process","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")"}],"roleHeading":"Instance Method","title":"traversePreOrder(process:)","externalID":"s:26ValueBasedBinarySearchTree0cdE0O16traversePreOrder7processyyxXE_tF","role":"symbol","modules":[{"name":"ValueBasedBinarySearchTree"}]},"hierarchy":{"paths":[["doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree"]]},"identifier":{"url":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/traversePreOrder(process:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"traversePreOrder"},{"kind":"text","text":"("},{"text":"process","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]}],"sections":[],"variants":[{"paths":["\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/traversepreorder(process:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree":{"identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree","abstract":[{"text":"An immutable Binary Search Tree (BST) using Enum value type. Each insertion or deletion will create a new BST.","type":"text"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BinarySearchTree"}],"url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree","navigatorTitle":[{"text":"BinarySearchTree","kind":"identifier"}],"title":"BinarySearchTree","kind":"symbol","role":"symbol"},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree":{"type":"topic","abstract":[],"kind":"symbol","title":"ValueBasedBinarySearchTree","identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree","role":"collection","url":"\/documentation\/valuebasedbinarysearchtree"},"doc://ValueBasedBinarySearchTree/documentation/ValueBasedBinarySearchTree/BinarySearchTree/traversePreOrder(process:)":{"abstract":[],"identifier":"doc:\/\/ValueBasedBinarySearchTree\/documentation\/ValueBasedBinarySearchTree\/BinarySearchTree\/traversePreOrder(process:)","title":"traversePreOrder(process:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/valuebasedbinarysearchtree\/binarysearchtree\/traversepreorder(process:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"traversePreOrder","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"process"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}