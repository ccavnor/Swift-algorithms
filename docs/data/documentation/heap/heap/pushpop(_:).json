{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushPop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"element"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"element","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the value to push"}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(log n) if heapify is required, else O(1)"}]}],"type":"aside","name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/heap\/heap\/pushpop(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Heap\/documentation\/Heap\/Heap\/pushPop(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Insert at the root and then extract (after heapify if required) in same operation."},{"type":"text","text":" "},{"type":"text","text":"This is more effecient than a consecutive push, then pop, which would both"},{"type":"text","text":" "},{"type":"text","text":"require an O(n) operation (a bubble-up then a bubble-down)."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushPop"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"title":"pushPop(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:4HeapAAC7pushPopyxSgxF","modules":[{"name":"Heap"}]},"hierarchy":{"paths":[["doc:\/\/Heap\/documentation\/Heap","doc:\/\/Heap\/documentation\/Heap\/Heap"]]},"references":{"doc://Heap/documentation/Heap/Heap":{"role":"symbol","title":"Heap","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Heap"}],"abstract":[{"type":"text","text":"A binary heap is a heap data structure that takes the form of a binary tree."},{"type":"text","text":" "},{"type":"text","text":"A binary heap has two constraints:"}],"identifier":"doc:\/\/Heap\/documentation\/Heap\/Heap","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Heap"}],"url":"\/documentation\/heap\/heap"},"doc://Heap/documentation/Heap/Heap/pushPop(_:)":{"role":"symbol","title":"pushPop(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushPop"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Insert at the root and then extract (after heapify if required) in same operation."},{"type":"text","text":" "},{"type":"text","text":"This is more effecient than a consecutive push, then pop, which would both"},{"type":"text","text":" "},{"type":"text","text":"require an O(n) operation (a bubble-up then a bubble-down)."}],"identifier":"doc:\/\/Heap\/documentation\/Heap\/Heap\/pushPop(_:)","kind":"symbol","type":"topic","url":"\/documentation\/heap\/heap\/pushpop(_:)"},"doc://Heap/documentation/Heap":{"role":"collection","title":"Heap","abstract":[],"identifier":"doc:\/\/Heap\/documentation\/Heap","kind":"symbol","type":"topic","url":"\/documentation\/heap"}}}